# HG changeset patch
# User Shane F. Carr <shane.carr@wustl.edu>
# Date 1593748718 0
#      Fri Jul 03 03:58:38 2020 +0000
# Branch oo-5.2a
# Node ID 97f7d1f4fe83bd6ebe102eb4cc6268ae23ad8d52
# Parent  d78448f9c48344a58f5f83d5d52c29bf1ad92cb7
Fixing compiler errors

diff -r d78448f9c483 -r 97f7d1f4fe83 libinterp/corefcn/event-manager.cc
--- a/libinterp/corefcn/event-manager.cc	Thu Jul 02 18:08:38 2020 -0500
+++ b/libinterp/corefcn/event-manager.cc	Fri Jul 03 03:58:38 2020 +0000
@@ -41,6 +41,17 @@
 
 namespace octave
 {
+
+  bool __event_manager_request_input_enabled__() {
+    event_manager& evmgr = __get_event_manager__ ("request_input_enabled");
+    return evmgr.request_input_enabled();
+  }
+
+  std::string __event_manager_request_url__(const std::string& url, const std::list<std::string>& param, const std::string& action, bool& success) {
+    event_manager& evmgr = __get_event_manager__ ("request_url");
+    return evmgr.request_url(url, param, action, success);
+  }
+
   static int readline_event_hook (void)
   {
     event_manager& evmgr = __get_event_manager__ ("octave_readline_hook");
@@ -653,18 +664,18 @@
   return ovl ();
 }
 
-DEFUN (__octave_link_plot_destination__, , ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} __octave_link_plot_destination__ ()
+DEFMETHOD (__event_manager_plot_destination__, interp, , ,
+           doc: /* -*- texinfo -*-
+@deftypefn {} {} __event_manager_plot_destination__ ()
 Undocumented internal function.
 @end deftypefn*/)
 {
-  return ovl (octave_link::plot_destination ());
+  return ovl (interp.get_event_manager().plot_destination());
 }
 
-DEFUN (__octave_link_show_static_plot__, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} __octave_link_show_static_plot__ (@var{term}, @var{content})
+DEFMETHOD (__event_manager_show_static_plot__, interp, args, ,
+           doc: /* -*- texinfo -*-
+@deftypefn {} {} __event_manager_show_static_plot__ (@var{term}, @var{content})
 Undocumented internal function.
 @end deftypefn*/)
 {
@@ -674,6 +685,6 @@
 
   std::string term = args(0).string_value();
   std::string content = args(1).string_value();
-  return ovl (octave_link::show_static_plot (term, content));
+  return ovl (interp.get_event_manager().show_static_plot(term, content));
 }
 
diff -r d78448f9c483 -r 97f7d1f4fe83 libinterp/corefcn/event-manager.h
--- a/libinterp/corefcn/event-manager.h	Thu Jul 02 18:08:38 2020 -0500
+++ b/libinterp/corefcn/event-manager.h	Fri Jul 03 03:58:38 2020 +0000
@@ -48,6 +48,12 @@
 
   class symbol_info_list;
 
+  enum plot_destination_t {
+    TERMINAL_ONLY = 0,
+    STATIC_ONLY = 1,
+    TERMINAL_AND_STATIC = 2
+  };
+
   // The methods in this class provide a way to pass signals to the GUI
   // thread.  A GUI that wishes to act on these events should derive
   // from this class and perform actions in a thread-safe way.  In
@@ -387,12 +393,6 @@
       return enabled () ? instance->_request_input_enabled : false;
     }
 
-    enum plot_destination_t {
-      TERMINAL_ONLY = 0,
-      STATIC_ONLY = 1,
-      TERMINAL_AND_STATIC = 2
-    };
-
     plot_destination_t plot_destination (void)
     {
       return enabled () ? instance->_plot_destination : TERMINAL_ONLY;
diff -r d78448f9c483 -r 97f7d1f4fe83 libinterp/corefcn/json-main.cc
--- a/libinterp/corefcn/json-main.cc	Thu Jul 02 18:08:38 2020 -0500
+++ b/libinterp/corefcn/json-main.cc	Fri Jul 03 03:58:38 2020 +0000
@@ -3,6 +3,7 @@
 #endif
 
 #include "json-main.h"
+#include "interpreter.h"
 
 #include <iostream>
 #include <sys/un.h>
@@ -13,6 +14,8 @@
 // Analog of main-window.cc
 // TODO: Think more about concurrency and null pointer exceptions
 
+namespace octave {
+
 void* run_loop_pthread(void* arg) {
   json_main* _json_main = static_cast<json_main*>(arg);
   _json_main->run_loop();
@@ -94,3 +97,5 @@
 void json_main::process_json_object(std::string name, JSON_OBJECT_T jobj) {
   _octave_json_link->receive_message(name, jobj);
 }
+
+} // namespace octave
diff -r d78448f9c483 -r 97f7d1f4fe83 libinterp/corefcn/json-main.h
--- a/libinterp/corefcn/json-main.h	Thu Jul 02 18:08:38 2020 -0500
+++ b/libinterp/corefcn/json-main.h	Fri Jul 03 03:58:38 2020 +0000
@@ -8,6 +8,10 @@
 #include "octave-json-link.h"
 #include "json-util.h"
 
+namespace octave {
+
+class interpreter;
+
 class json_main {
 public:
 	json_main(interpreter& interp, const std::string& json_sock_path, int max_message_length);
@@ -25,8 +29,9 @@
 	bool _loop_thread_active;
 	pthread_t _loop_thread;
 
-	// Owned by octave_link
-	octave_json_link* _octave_json_link;
+	std::shared_ptr<octave_json_link> _octave_json_link;
 };
 
+} // namespace octave
+
 #endif
diff -r d78448f9c483 -r 97f7d1f4fe83 libinterp/corefcn/json-util.cc
--- a/libinterp/corefcn/json-util.cc	Thu Jul 02 18:08:38 2020 -0500
+++ b/libinterp/corefcn/json-util.cc	Fri Jul 03 03:58:38 2020 +0000
@@ -14,6 +14,8 @@
 
 #include "json-util.h"
 
+namespace octave {
+
 JSON_OBJECT_T json_util::from_string(const std::string& str) {
 	// Note: the string is not necesarilly valid UTF-8. The consumers of this stream must be able to handle that situation and substitute replacement characters, etc., where necessary.
 	return json_object_new_string_len(str.c_str(), str.length());
@@ -70,7 +72,7 @@
 	return json_object_from_list(list, json_util::from_float);
 }
 
-JSON_OBJECT_T json_util::from_symbol_info_list(const octave::symbol_info_list& list) {
+JSON_OBJECT_T json_util::from_symbol_info_list(const symbol_info_list& list) {
 	JSON_OBJECT_T jobj = json_object_new_array();
 	for (
 		auto it = list.begin();
@@ -82,7 +84,7 @@
 	return jobj;
 }
 
-JSON_OBJECT_T json_util::from_filter_list(const octave_link::filter_list& list) {
+JSON_OBJECT_T json_util::from_filter_list(const interpreter_events::filter_list& list) {
 	return json_object_from_list(list, json_util::from_pair);
 }
 
@@ -90,7 +92,7 @@
 	return json_util::from_string(str);
 }
 
-JSON_OBJECT_T json_util::from_symbol_info(const octave::symbol_info element) {
+JSON_OBJECT_T json_util::from_symbol_info(const symbol_info element) {
 	octave_value val = element.value();
 
 	std::string dims_str = val.get_dims_str();
@@ -258,3 +260,5 @@
   	arg
   );
 }
+
+} // namespace octave
diff -r d78448f9c483 -r 97f7d1f4fe83 libinterp/corefcn/json-util.h
--- a/libinterp/corefcn/json-util.h	Thu Jul 02 18:08:38 2020 -0500
+++ b/libinterp/corefcn/json-util.h	Fri Jul 03 03:58:38 2020 +0000
@@ -21,6 +21,8 @@
 	m[#FIELD] = json_util::from_##TYPE (FIELD); \
 }
 
+namespace octave {
+
 class json_util {
 public:
 	static JSON_OBJECT_T from_string(const std::string& str);
@@ -33,11 +35,11 @@
 	static JSON_OBJECT_T from_string_vector(const string_vector& list);
 	static JSON_OBJECT_T from_int_list(const std::list<int>& list);
 	static JSON_OBJECT_T from_float_list(const std::list<float>& list);
-	static JSON_OBJECT_T from_symbol_info_list(const octave::symbol_info_list& list);
-	static JSON_OBJECT_T from_filter_list(const event_manager::filter_list& list);
+	static JSON_OBJECT_T from_symbol_info_list(const symbol_info_list& list);
+        static JSON_OBJECT_T from_filter_list(const interpreter_events::filter_list& list);
 
 	static JSON_OBJECT_T from_value_string(const std::string str);
-	static JSON_OBJECT_T from_symbol_info(const octave::symbol_info element);
+	static JSON_OBJECT_T from_symbol_info(const symbol_info element);
 	static JSON_OBJECT_T from_pair(std::pair<std::string, std::string> pair);
 
 	static JSON_OBJECT_T from_map(JSON_MAP_T m);
@@ -57,4 +59,6 @@
 	static void process_message(JSON_OBJECT_T jobj, void (*cb)(std::string, JSON_OBJECT_T, void*), void* arg);
 };
 
+} // namespace octave
+
 #endif
diff -r d78448f9c483 -r 97f7d1f4fe83 libinterp/corefcn/octave-json-link.cc
--- a/libinterp/corefcn/octave-json-link.cc	Thu Jul 02 18:08:38 2020 -0500
+++ b/libinterp/corefcn/octave-json-link.cc	Fri Jul 03 03:58:38 2020 +0000
@@ -30,6 +30,8 @@
 #include "json-main.h"
 #include "json-util.h"
 
+namespace octave {
+
 octave_json_link::octave_json_link(json_main* __json_main)
 	: interpreter_events (),
 		_json_main (__json_main)
@@ -40,7 +42,7 @@
 
 octave_json_link::~octave_json_link(void) { }
 
-std::string octave_json_link::do_request_input(const std::string& prompt) {
+std::string octave_json_link::request_input(const std::string& prompt) {
 	// Triggered whenever the console prompts for user input
 
 	std::string value;
@@ -51,7 +53,7 @@
 	return value;
 }
 
-std::string octave_json_link::do_request_url(const std::string& url, const std::list<std::string>& param, const std::string& action, bool& success) {
+std::string octave_json_link::request_url(const std::string& url, const std::list<std::string>& param, const std::string& action, bool& success) {
 	// Triggered on urlread/urlwrite
 
 	JSON_MAP_T m;
@@ -65,7 +67,7 @@
 	return result.second;
 }
 
-bool octave_json_link::do_confirm_shutdown(void) {
+bool octave_json_link::confirm_shutdown(void) {
 	// Triggered when the kernel tries to exit
 	_publish_message("confirm-shutdown", json_util::empty());
 
@@ -85,7 +87,7 @@
 // 	return true;
 // }
 
-bool octave_json_link::do_copy_image_to_clipboard(const std::string& file) {
+bool octave_json_link::copy_image_to_clipboard(const std::string& file) {
 	// This endpoint might be unused?  (References appear only in libgui)
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, file, string);
@@ -94,7 +96,7 @@
 	return true;
 }
 
-bool octave_json_link::do_edit_file(const std::string& file) {
+bool octave_json_link::edit_file(const std::string& file) {
 	// Triggered in "edit" for existing files
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, file, string);
@@ -103,7 +105,7 @@
 	return true;
 }
 
-bool octave_json_link::do_prompt_new_edit_file(const std::string& file) {
+bool octave_json_link::prompt_new_edit_file(const std::string& file) {
 	// Triggered in "edit" for new files
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, file, string);
@@ -123,7 +125,7 @@
 // 	return message_dialog_queue.dequeue();
 // }
 
-std::string octave_json_link::do_question_dialog(const std::string& msg, const std::string& title, const std::string& btn1, const std::string& btn2, const std::string& btn3, const std::string& btndef) {
+std::string octave_json_link::question_dialog(const std::string& msg, const std::string& title, const std::string& btn1, const std::string& btn2, const std::string& btn3, const std::string& btndef) {
 	// Triggered in "questdlg"
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, msg, string);
@@ -137,7 +139,7 @@
 	return question_dialog_queue.dequeue();
 }
 
-std::pair<std::list<int>, int> octave_json_link::do_list_dialog(const std::list<std::string>& list, const std::string& mode, int width, int height, const std::list<int>& initial_value, const std::string& name, const std::list<std::string>& prompt, const std::string& ok_string, const std::string& cancel_string) {
+std::pair<std::list<int>, int> octave_json_link::list_dialog(const std::list<std::string>& list, const std::string& mode, int width, int height, const std::list<int>& initial_value, const std::string& name, const std::list<std::string>& prompt, const std::string& ok_string, const std::string& cancel_string) {
 	// Triggered in "listdlg"
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, list, string_list);
@@ -154,7 +156,7 @@
 	return list_dialog_queue.dequeue();
 }
 
-std::list<std::string> octave_json_link::do_input_dialog(const std::list<std::string>& prompt, const std::string& title, const std::list<float>& nr, const std::list<float>& nc, const std::list<std::string>& defaults) {
+std::list<std::string> octave_json_link::input_dialog(const std::list<std::string>& prompt, const std::string& title, const std::list<float>& nr, const std::list<float>& nc, const std::list<std::string>& defaults) {
 	// Triggered in "inputdlg"
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, prompt, string_list);
@@ -167,7 +169,7 @@
 	return input_dialog_queue.dequeue();
 }
 
-std::list<std::string> octave_json_link::do_file_dialog(const filter_list& filter, const std::string& title, const std::string &filename, const std::string &pathname, const std::string& multimode) {
+std::list<std::string> octave_json_link::file_dialog(const filter_list& filter, const std::string& title, const std::string &filename, const std::string &pathname, const std::string& multimode) {
 	// Triggered in "uiputfile", "uigetfile", and "uigetdir"
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, filter, filter_list);
@@ -180,7 +182,7 @@
 	return file_dialog_queue.dequeue();
 }
 
-int octave_json_link::do_debug_cd_or_addpath_error(const std::string& file, const std::string& dir, bool addpath_option) {
+int octave_json_link::debug_cd_or_addpath_error(const std::string& file, const std::string& dir, bool addpath_option) {
 	// This endpoint might be unused?  (No references)
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, file, string);
@@ -191,14 +193,14 @@
 	return debug_cd_or_addpath_error_queue.dequeue();
 }
 
-void octave_json_link::do_change_directory(const std::string& dir) {
+void octave_json_link::directory_changed(const std::string& dir) {
 	// This endpoint might be unused?  (References appear only in libgui)
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, dir, string);
 	_publish_message("change-directory", json_util::from_map(m));
 }
 
-void octave_json_link::do_file_remove (const std::string& old_name, const std::string& new_name) {
+void octave_json_link::file_remove (const std::string& old_name, const std::string& new_name) {
 	// Called by "unlink", "rmdir", "rename"
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, old_name, string);
@@ -206,27 +208,27 @@
 	_publish_message("file-remove", json_util::from_map(m));
 }
 
-void octave_json_link::do_file_renamed (bool status) {
+void octave_json_link::file_renamed (bool status) {
 	// Called by "unlink", "rmdir", "rename"
 	_publish_message("file-renamed", json_util::from_boolean(status));
 }
 
-void octave_json_link::do_execute_command_in_terminal(const std::string& command) {
+void octave_json_link::execute_command_in_terminal(const std::string& command) {
 	// This endpoint might be unused?  (References appear only in libgui)
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, command, string);
 	_publish_message("execute-command-in-terminal", json_util::from_map(m));
 }
 
-uint8NDArray octave_json_link::do_get_named_icon (const std::string& /* icon_name */) {
+uint8NDArray octave_json_link::get_named_icon (const std::string& /* icon_name */) {
 	// Called from msgbox.m
 	// TODO: Implement request/response for this event
 	uint8NDArray retval;
 	return retval;
 }
 
-void octave_json_link::do_set_workspace(bool top_level, bool debug,
-                         const octave::symbol_info_list& ws,
+void octave_json_link::set_workspace(bool top_level, bool debug,
+                         const symbol_info_list& ws,
                          bool update_variable_editor) {
 	// Triggered on every new line entry
 	JSON_MAP_T m;
@@ -237,62 +239,63 @@
 	_publish_message("set-workspace", json_util::from_map(m));
 }
 
-void octave_json_link::do_clear_workspace(void) {
+void octave_json_link::clear_workspace(void) {
 	// Triggered on "clear" command (but not "clear all" or "clear foo")
 	_publish_message("clear-workspace", json_util::empty());
 }
 
-void octave_json_link::do_set_history(const string_vector& hist) {
+void octave_json_link::set_history(const string_vector& hist) {
 	// Called at startup, possibly more?
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, hist, string_vector);
 	_publish_message("set-history", json_util::from_map(m));
 }
 
-void octave_json_link::do_append_history(const std::string& hist_entry) {
+void octave_json_link::append_history(const std::string& hist_entry) {
 	// Appears to be tied to readline, if available
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, hist_entry, string);
 	_publish_message("append-history", json_util::from_map(m));
 }
 
-void octave_json_link::do_clear_history(void) {
+void octave_json_link::clear_history(void) {
 	// Appears to be tied to readline, if available
 	_publish_message("clear-history", json_util::empty());
 }
 
-void octave_json_link::do_clear_screen(void) {
+void octave_json_link::clear_screen(void) {
 	// Triggered by clc
 	_publish_message("clear-screen", json_util::empty());
 }
 
-void octave_json_link::do_pre_input_event(void) {
+void octave_json_link::pre_input_event(void) {
 	// noop
 }
 
-void octave_json_link::do_post_input_event(void) {
+void octave_json_link::post_input_event(void) {
 	// noop
 }
 
-void octave_json_link::do_enter_debugger_event(const std::string& file, int line) {
+void octave_json_link::enter_debugger_event(const std::string& fcn_name, const std::string& fcn_file_name, int line) {
 	JSON_MAP_T m;
-	JSON_MAP_SET(m, file, string);
+	JSON_MAP_SET(m, fcn_name, string);
+	JSON_MAP_SET(m, fcn_file_name, string);
 	JSON_MAP_SET(m, line, int);
 	_publish_message("enter-debugger-event", json_util::from_map(m));
 }
 
-void octave_json_link::do_execute_in_debugger_event(const std::string& file, int line) {
+void octave_json_link::execute_in_debugger_event(const std::string& file, int line) {
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, file, string);
 	JSON_MAP_SET(m, line, int);
 	_publish_message("execute-in-debugger-event", json_util::from_map(m));
 }
 
-void octave_json_link::do_exit_debugger_event(void) {
+void octave_json_link::exit_debugger_event(void) {
 	_publish_message("exit-debugger-event", json_util::empty());
 }
 
-void octave_json_link::do_update_breakpoint(bool insert, const std::string& file, int line, const std::string& cond) {
+void octave_json_link::update_breakpoint(bool insert, const std::string& file, int line, const std::string& cond) {
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, insert, boolean);
 	JSON_MAP_SET(m, file, string);
@@ -310,34 +313,34 @@
 // 	_publish_message("set-default-prompts", json_util::from_map(m));
 // }
 
-void octave_json_link::do_show_preferences(void) {
+void octave_json_link::show_preferences(void) {
 	// Triggered on "preferences" command
 	_publish_message("show-preferences", json_util::empty());
 }
 
-std::string octave_json_link::do_gui_preference (const std::string& /* key */, const std::string& /* value */) {
+std::string octave_json_link::gui_preference (const std::string& /* key */, const std::string& /* value */) {
 	// Used by Octave GUI?
 	// TODO: Implement request/response for this event
 	std::string retval;
 	return retval;
 }
 
-void octave_json_link::do_show_doc(const std::string& file) {
+void octave_json_link::show_doc(const std::string& file) {
 	// Triggered on "doc" command
 	_publish_message("show-doc", json_util::from_string(file));
 }
 
-void octave_json_link::do_register_doc (const std::string& file) {
+void octave_json_link::register_doc (const std::string& file) {
 	// Triggered by the GUI documentation viewer?
 	_publish_message("register-doc", json_util::from_string(file));
 }
 
-void octave_json_link::do_unregister_doc (const std::string& file) {
+void octave_json_link::unregister_doc (const std::string& file) {
 	// Triggered by the GUI documentation viewer?
 	_publish_message("unregister-doc", json_util::from_string(file));
 }
 
-void octave_json_link::do_edit_variable (const std::string& name, const octave_value& /* val */) {
+void octave_json_link::edit_variable (const std::string& name, const octave_value& /* val */) {
 	// Triggered on "openvar" command
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, name, string);
@@ -345,9 +348,9 @@
 	_publish_message("edit-variable", json_util::from_map(m));
 }
 
-void octave_json_link::do_show_static_plot(const std::string& term, const std::string& content) {
+void octave_json_link::show_static_plot(const std::string& term, const std::string& content) {
 	// Triggered on all plot commands with setenv("GNUTERM","svg")
-	int command_number = octave::command_editor::current_command_number();
+	int command_number = command_editor::current_command_number();
 	JSON_MAP_T m;
 	JSON_MAP_SET(m, term, string);
 	JSON_MAP_SET(m, content, string);
@@ -405,3 +408,4 @@
 	_json_main->publish_message(name, jobj);
 }
 
+} // namespace octave
diff -r d78448f9c483 -r 97f7d1f4fe83 libinterp/corefcn/octave-json-link.h
--- a/libinterp/corefcn/octave-json-link.h	Thu Jul 02 18:08:38 2020 -0500
+++ b/libinterp/corefcn/octave-json-link.h	Fri Jul 03 03:58:38 2020 +0000
@@ -30,6 +30,10 @@
 #include "json-util.h"
 #include "oct-mutex.h"
 
+class string_vector;
+
+namespace octave {
+
 // Circular reference
 class json_main;
 
@@ -45,7 +49,7 @@
 
 private:
   std::queue<T> _queue;
-  octave::mutex _mutex;
+  mutex _mutex;
 };
 
 class octave_json_link : public interpreter_events
@@ -57,23 +61,23 @@
 
   ~octave_json_link (void);
 
-  std::string do_request_input (const std::string& prompt) override;
-  std::string do_request_url (const std::string& url, const std::list<std::string>& param, const std::string& action, bool& success) override;
+  std::string request_input (const std::string& prompt) override;
+  std::string request_url (const std::string& url, const std::list<std::string>& param, const std::string& action, bool& success) override;
 
-  bool do_confirm_shutdown (void) override;
+  bool confirm_shutdown (void) override;
 
-  bool do_copy_image_to_clipboard (const std::string& file) override;
+  bool copy_image_to_clipboard (const std::string& file) override;
 
-  bool do_edit_file (const std::string& file) override;
-  bool do_prompt_new_edit_file (const std::string& file) override;
+  bool edit_file (const std::string& file) override;
+  bool prompt_new_edit_file (const std::string& file) override;
 
   std::string
-  do_question_dialog (const std::string& msg, const std::string& title,
+  question_dialog (const std::string& msg, const std::string& title,
                       const std::string& btn1, const std::string& btn2,
                       const std::string& btn3, const std::string& btndef) override;
 
   std::pair<std::list<int>, int>
-  do_list_dialog (const std::list<std::string>& list,
+  list_dialog (const std::list<std::string>& list,
                   const std::string& mode,
                   int width, int height,
                   const std::list<int>& initial_value,
@@ -83,67 +87,67 @@
                   const std::string& cancel_string) override;
 
   std::list<std::string>
-  do_input_dialog (const std::list<std::string>& prompt,
+  input_dialog (const std::list<std::string>& prompt,
                    const std::string& title,
                    const std::list<float>& nr,
                    const std::list<float>& nc,
                    const std::list<std::string>& defaults) override;
 
   std::list<std::string>
-  do_file_dialog (const filter_list& filter, const std::string& title,
+  file_dialog (const filter_list& filter, const std::string& title,
                   const std::string &filename, const std::string &pathname,
                   const std::string& multimode) override;
 
   int
-  do_debug_cd_or_addpath_error (const std::string& file,
+  debug_cd_or_addpath_error (const std::string& file,
                                 const std::string& dir,
                                 bool addpath_option) override;
 
-  void do_change_directory (const std::string& dir) override;
+  void directory_changed (const std::string& dir) override;
 
-  void do_file_remove (const std::string& old_name, const std::string& new_name) override;
-  void do_file_renamed (bool) override;
+  void file_remove (const std::string& old_name, const std::string& new_name) override;
+  void file_renamed (bool) override;
 
-  void do_execute_command_in_terminal (const std::string& command) override;
+  void execute_command_in_terminal (const std::string& command) override;
 
-  uint8NDArray do_get_named_icon (const std::string& icon_name) override;
+  uint8NDArray get_named_icon (const std::string& icon_name) override;
 
-  void do_set_workspace (bool top_level, bool debug,
-                         const octave::symbol_info_list& ws,
+  void set_workspace (bool top_level, bool debug,
+                         const symbol_info_list& ws,
                          bool update_variable_editor) override;
 
-  void do_clear_workspace (void) override;
+  void clear_workspace (void) override;
 
-  void do_set_history (const string_vector& hist) override;
-  void do_append_history (const std::string& hist_entry) override;
-  void do_clear_history (void) override;
+  void set_history (const string_vector& hist) override;
+  void append_history (const std::string& hist_entry) override;
+  void clear_history (void) override;
 
-  void do_clear_screen (void) override;
+  void clear_screen (void) override;
 
-  void do_pre_input_event (void) override;
-  void do_post_input_event (void) override;
+  void pre_input_event (void) override;
+  void post_input_event (void) override;
 
-  void do_enter_debugger_event (const std::string& file, int line) override;
-  void do_execute_in_debugger_event (const std::string& file, int line) override;
-  void do_exit_debugger_event (void) override;
+  void enter_debugger_event (const std::string& fcn_name, const std::string& fcn_file_name, int line) override;
+  void execute_in_debugger_event (const std::string& file, int line) override;
+  void exit_debugger_event (void) override;
 
-  void do_update_breakpoint (bool insert,
+  void update_breakpoint (bool insert,
                              const std::string& file, int line,
                              const std::string& cond) override;
 
-  void do_show_preferences (void) override;
+  void show_preferences (void) override;
 
-  std::string do_gui_preference (const std::string& key, const std::string& value) override;
+  std::string gui_preference (const std::string& key, const std::string& value) override;
 
-  void do_show_doc (const std::string& file) override;
+  void show_doc (const std::string& file) override;
 
-  void do_register_doc (const std::string& file) override;
+  void register_doc (const std::string& file) override;
 
-  void do_unregister_doc (const std::string& file) override;
+  void unregister_doc (const std::string& file) override;
 
-  void do_edit_variable (const std::string& name, const octave_value& val) override;
+  void edit_variable (const std::string& name, const octave_value& val) override;
 
-  void do_show_static_plot (const std::string& term,
+  void show_static_plot (const std::string& term,
                             const std::string& content) override;
 
   // Custom methods
@@ -207,4 +211,6 @@
   return retval;
 }
 
+} // namespace octave
+  
 #endif
diff -r d78448f9c483 -r 97f7d1f4fe83 libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc	Thu Jul 02 18:08:38 2020 -0500
+++ b/libinterp/corefcn/sysdep.cc	Fri Jul 03 03:58:38 2020 +0000
@@ -755,7 +755,8 @@
 {
   bool skip_redisplay = true;
 
-  octave_link::clear_screen ();
+  octave::event_manager& evmgr = octave::__get_event_manager__ ("clc");
+  evmgr.clear_screen();
 
   octave::command_editor::clear_screen (skip_redisplay);
 
diff -r d78448f9c483 -r 97f7d1f4fe83 libinterp/octave.cc
--- a/libinterp/octave.cc	Thu Jul 02 18:08:38 2020 -0500
+++ b/libinterp/octave.cc	Fri Jul 03 03:58:38 2020 +0000
@@ -382,6 +382,14 @@
     sysdep_init ();
   }
 
+  bool application::link_enabled (void) const
+  {
+    if (m_interpreter) {
+      event_manager& evmgr = m_interpreter->get_event_manager ();
+      return evmgr.enabled();
+    } else return false;
+  }
+
   int cli_application::execute (void)
   {
     interpreter& interp = create_interpreter ();
diff -r d78448f9c483 -r 97f7d1f4fe83 libinterp/octave.h
--- a/libinterp/octave.h	Thu Jul 02 18:08:38 2020 -0500
+++ b/libinterp/octave.h	Fri Jul 03 03:58:38 2020 +0000
@@ -240,6 +240,7 @@
   // both) of them...
 
   class interpreter;
+  class event_manager;
 
   // Base class for an Octave application.
 
@@ -289,6 +290,8 @@
     virtual bool gui_running (void) const { return false; }
     virtual void gui_running (bool) { }
 
+    bool link_enabled (void) const;
+
     void program_invocation_name (const std::string& nm) { m_program_invocation_name = nm; }
 
     void program_name (const std::string& nm) { m_program_name = nm; }
@@ -319,10 +322,7 @@
 
     static bool is_link_enabled (void)
     {
-      if (instance && instance->m_interpreter) {
-        event_manager& evmgr = instance->m_interpreter->get_event_manager ();
-        return evmgr.enabled();
-      } else return false;
+      return instance ? instance->link_enabled () : false;
     }
 
     // Convenience functions.
diff -r d78448f9c483 -r 97f7d1f4fe83 liboctave/util/oct-mutex.cc
--- a/liboctave/util/oct-mutex.cc	Thu Jul 02 18:08:38 2020 -0500
+++ b/liboctave/util/oct-mutex.cc	Fri Jul 03 03:58:38 2020 +0000
@@ -180,7 +180,7 @@
 
     void cond_wait (void)
     {
-      pthread_cond_wait (&condv, &pm);
+      pthread_cond_wait (&condv, &m_pm);
     }
 
     void cond_signal (void)
diff -r d78448f9c483 -r 97f7d1f4fe83 liboctave/util/oct-mutex.h
--- a/liboctave/util/oct-mutex.h	Thu Jul 02 18:08:38 2020 -0500
+++ b/liboctave/util/oct-mutex.h	Fri Jul 03 03:58:38 2020 +0000
@@ -108,12 +108,12 @@
 
     void cond_wait (void)
     {
-      rep->cond_wait ();
+      m_rep->cond_wait ();
     }
 
     void cond_signal (void)
     {
-      rep->cond_signal ();
+      m_rep->cond_signal ();
     }
 
   protected:
diff -r d78448f9c483 -r 97f7d1f4fe83 liboctave/util/url-transfer.cc
--- a/liboctave/util/url-transfer.cc	Thu Jul 02 18:08:38 2020 -0500
+++ b/liboctave/util/url-transfer.cc	Fri Jul 03 03:58:38 2020 +0000
@@ -36,7 +36,6 @@
 #include "file-stat.h"
 #include "lo-sysdep.h"
 #include "oct-env.h"
-#include "libinterp/corefcn/interpreter-private.h"
 #include "gnulib/lib/base64.h"
 #include "unwind-prot.h"
 #include "url-transfer.h"
@@ -50,6 +49,10 @@
 
 namespace octave
 {
+  // Forward declaration for event_manager
+  extern bool __event_manager_request_input_enabled__();
+  extern std::string __event_manager_request_url__(const std::string& url, const std::list<std::string>& param, const std::string& action, bool& success);
+
   base_url_transfer::base_url_transfer (void)
     : m_host_or_url (), m_valid (false), m_ftp (false),
       m_ascii_mode (false), m_ok (true), m_errmsg (),
@@ -249,38 +252,38 @@
 
   link_transfer (void)
       : base_url_transfer () {
-    valid = true;
+    m_valid = true;
   }
 
   link_transfer (const std::string& host, const std::string& user_arg,
                  const std::string& passwd, std::ostream& os)
       : base_url_transfer (host, user_arg, passwd, os) {
-    valid = true;
+    m_valid = true;
     // url = "ftp://" + host;
   }
 
   link_transfer (const std::string& url_str, std::ostream& os)
       : base_url_transfer (url_str, os) {
-    valid = true;
+    m_valid = true;
   }
 
   ~link_transfer (void) {}
 
   void http_get (const Array<std::string>& param) {
-    perform (param, "get");
+    perform_action (param, "get");
   }
 
   void http_post (const Array<std::string>& param) {
-    perform (param, "post");
+    perform_action (param, "post");
   }
 
   void http_action (const Array<std::string>& param, const std::string& action) {
-    perform (param, action);
+    perform_action (param, action);
   }
 
 private:
-  void perform(const Array<std::string>& param, const std::string& action) {
-    std::string url = host_or_url;
+  void perform_action(const Array<std::string>& param, const std::string& action) {
+    std::string url = m_host_or_url;
 
     // Convert from Array to std::list
     std::list<std::string> paramList;
@@ -289,19 +292,18 @@
       paramList.push_back(value);
     }
 
-    event_manager& evmgr = __get_event_manager__ ("link_transfer");
-    if (evmgr.request_input_enabled ()) {
+    if (__event_manager_request_input_enabled__()) {
       bool success;
-      std::string result = evmgr.request_url (url, paramList, action, success);
+      std::string result = __event_manager_request_url__(url, paramList, action, success);
       if (success) {
         process_success(result);
       } else {
-        ok = false;
-        errmsg = result;
+        m_ok = false;
+        m_errmsg = result;
       }
     } else {
-      ok = false;
-      errmsg = "octave_link not connected for link_transfer";
+      m_ok = false;
+      m_errmsg = "octave_link not connected for link_transfer";
     }
   }
 
@@ -313,10 +315,10 @@
     size_t outlen;
     bool b64_ok = base64_decode_alloc(inc, result.length(), &out, &outlen);
     if (!b64_ok) {
-      ok = false;
-      errmsg = "failed decoding base64 from octave_link";
+      m_ok = false;
+      m_errmsg = "failed decoding base64 from octave_link";
     } else {
-      curr_ostream->write(out, outlen);
+      m_curr_ostream->write(out, outlen);
       ::free(out);
     }
   }
@@ -1025,8 +1027,7 @@
 #endif
 
   url_transfer::url_transfer (void) {
-    event_manager& evmgr = __get_event_manager__ ("url_transfer");
-    if (evmgr.request_input_enabled()) {
+    if (__event_manager_request_input_enabled__()) {
       m_rep.reset(new link_transfer());
     } else {
       m_rep.reset(new REP_CLASS());
@@ -1035,8 +1036,7 @@
 
   url_transfer::url_transfer (const std::string& host, const std::string& user,
                               const std::string& passwd, std::ostream& os) {
-    event_manager& evmgr = __get_event_manager__ ("url_transfer");
-    if (evmgr.request_input_enabled()) {
+    if (__event_manager_request_input_enabled__()) {
       m_rep.reset(new link_transfer(host, user, passwd, os));
     } else {
       m_rep.reset(new REP_CLASS(host, user, passwd, os));
@@ -1044,8 +1044,7 @@
   }
 
   url_transfer::url_transfer (const std::string& url, std::ostream& os) {
-    event_manager& evmgr = __get_event_manager__ ("url_transfer");
-    if (evmgr.request_input_enabled()) {
+    if (__event_manager_request_input_enabled__()) {
       m_rep.reset(new link_transfer(url, os));
     } else {
       m_rep.reset(new REP_CLASS(url, os));
